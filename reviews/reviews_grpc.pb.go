// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: reviews/reviews.proto

package reviews

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewsServiceClient is the client API for ReviewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewsServiceClient interface {
	CreateReview(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	GetReviews(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (ReviewsService_GetReviewsClient, error)
	UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Count, error)
	DeleteReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*Count, error)
}

type reviewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewsServiceClient(cc grpc.ClientConnInterface) ReviewsServiceClient {
	return &reviewsServiceClient{cc}
}

func (c *reviewsServiceClient) CreateReview(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, "/reviews.ReviewsService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewsServiceClient) GetReviews(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (ReviewsService_GetReviewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReviewsService_ServiceDesc.Streams[0], "/reviews.ReviewsService/GetReviews", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewsServiceGetReviewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReviewsService_GetReviewsClient interface {
	Recv() (*Review, error)
	grpc.ClientStream
}

type reviewsServiceGetReviewsClient struct {
	grpc.ClientStream
}

func (x *reviewsServiceGetReviewsClient) Recv() (*Review, error) {
	m := new(Review)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reviewsServiceClient) UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/reviews.ReviewsService/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewsServiceClient) DeleteReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/reviews.ReviewsService/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewsServiceServer is the server API for ReviewsService service.
// All implementations must embed UnimplementedReviewsServiceServer
// for forward compatibility
type ReviewsServiceServer interface {
	CreateReview(context.Context, *ReviewRequest) (*ReviewResponse, error)
	GetReviews(*ProductId, ReviewsService_GetReviewsServer) error
	UpdateReview(context.Context, *Review) (*Count, error)
	DeleteReview(context.Context, *ReviewId) (*Count, error)
	mustEmbedUnimplementedReviewsServiceServer()
}

// UnimplementedReviewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewsServiceServer struct {
}

func (UnimplementedReviewsServiceServer) CreateReview(context.Context, *ReviewRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewsServiceServer) GetReviews(*ProductId, ReviewsService_GetReviewsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedReviewsServiceServer) UpdateReview(context.Context, *Review) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedReviewsServiceServer) DeleteReview(context.Context, *ReviewId) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedReviewsServiceServer) mustEmbedUnimplementedReviewsServiceServer() {}

// UnsafeReviewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewsServiceServer will
// result in compilation errors.
type UnsafeReviewsServiceServer interface {
	mustEmbedUnimplementedReviewsServiceServer()
}

func RegisterReviewsServiceServer(s grpc.ServiceRegistrar, srv ReviewsServiceServer) {
	s.RegisterService(&ReviewsService_ServiceDesc, srv)
}

func _ReviewsService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reviews.ReviewsService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServiceServer).CreateReview(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewsService_GetReviews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReviewsServiceServer).GetReviews(m, &reviewsServiceGetReviewsServer{stream})
}

type ReviewsService_GetReviewsServer interface {
	Send(*Review) error
	grpc.ServerStream
}

type reviewsServiceGetReviewsServer struct {
	grpc.ServerStream
}

func (x *reviewsServiceGetReviewsServer) Send(m *Review) error {
	return x.ServerStream.SendMsg(m)
}

func _ReviewsService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reviews.ReviewsService/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServiceServer).UpdateReview(ctx, req.(*Review))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewsService_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServiceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reviews.ReviewsService/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServiceServer).DeleteReview(ctx, req.(*ReviewId))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewsService_ServiceDesc is the grpc.ServiceDesc for ReviewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reviews.ReviewsService",
	HandlerType: (*ReviewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReview",
			Handler:    _ReviewsService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _ReviewsService_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _ReviewsService_DeleteReview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReviews",
			Handler:       _ReviewsService_GetReviews_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reviews/reviews.proto",
}
